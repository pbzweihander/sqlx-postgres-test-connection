name: Rust

on:
  pull_request:
  push:
    branches:
    - main

jobs:
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - run: rustup component add rustfmt
    - uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all -- --check

  check:
    name: Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [async-std-native-tls, tokio-native-tls, actix-native-tls, async-std-rustls, tokio-rustls, actix-rustls]
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - run: rustup component add clippy
    - uses: actions-rs/cargo@v1
      with:
        command: generate-lockfile
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-check-${{ matrix.runtime }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-check-${{ matrix.runtime }}-
    - uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --package sqlx-test-connection --features runtime-${{ matrix.runtime }}

  test:
    name: Test suites
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [async-std-native-tls, tokio-native-tls, actix-native-tls, async-std-rustls, tokio-rustls, actix-rustls]
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: generate-lockfile
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-test-
    - uses: actions-rs/cargo@v1
      with:
        command: test
        args: --package sqlx-test-connection --features runtime-${{ matrix.runtime }}

  check-tide:
    name: Check tide extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [native-tls, rustls]
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - run: rustup component add clippy
    - uses: actions-rs/cargo@v1
      with:
        command: generate-lockfile
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-check-tide-${{ matrix.runtime }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-check-tide-${{ matrix.runtime }}-
    - uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --manifest-path tide-sqlx-test-connection/Cargo.toml --features ${{ matrix.runtime }}

  test-tide:
    name: Test tide extension
    runs-on: ubuntu-latest
    strategy:
      matrix:
        runtime: [native-tls, rustls]
    services:
      postgres:
        image: postgres:12-alpine
        env:
          POSTGRES_PASSWORD: postgres
        ports:
        - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
    steps:
    - uses: actions/checkout@v2
    - uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true
    - uses: actions-rs/cargo@v1
      with:
        command: generate-lockfile
    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-test-tide-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: ${{ runner.os }}-test-tide-
    - uses: actions-rs/cargo@v1
      with:
        command: test
        args: --manifest-path tide-sqlx-test-connection/Cargo.toml --features ${{ matrix.runtime }}
